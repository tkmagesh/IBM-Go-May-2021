We shall commence at 9:35

1. Your Name
2. Total Experience
3. Primary Skillset
4. Experience in Go (if any)



Schedule
commence : 9:30 AM
tea break : 11:00 AM (for 20 mins)
lunch break : 1:00 PM (for 60 mins)
tea break : 3:30 PM (for 20 mins)
windup : 5:30 PM

Why Go?

    Concurrency
    Performance
    Scalable (Concurrency)
    Compiled

    Simplicity 
        - Only 25 keywords
        - No classes
            - No inheritance
        - Prefer Composition over inheritance
        - No access modifiers
            (access is defined by convention)
        - No Exceptions (only Error)
            To support Concurrency
        - No generics

    Built for Concurrency
        Language features for concurrency
            go, chan, select, range, close
        Builtin Scheduler
        1000s of goroutines can be executed using 1 thread


Barry Shwartz
    Paradox of Choice (TED talk)

        


Class
    template for an object

Object
    State (struct)
    Behavior (functions)

Visual Studio Code (http://code.VisualStudio.com)
goland (commercial)

Data Types
    bool
    string

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    int16
    uint32
    int64

    float32
    float64

    complex64 (real float32, imaginary float32)
    complex128 ( real float64, imaginary float64)

    byte (alias for uint8)
    rune (alias for int32, represents 1 unicode character)

strongly typed language
No implicit type conversion


functions
    can return multiple values (tuple)
    supports higher order functions (functions as data)
        can assign a function to a varible
        can pass a function as an argument to another function
        can return a function as a return value from another function


Build a CLI based calculator
    Display the following menu
        1. add
        2. subtract
        3. multiply
        4. divide
        5. exit


defer
    - postponing

$GOROOT
    folder of the go compiler and other binaries

$GOPATH
    folter where the application is maintained
    /pkg
        /mod
            /github.com
                /fatih
                    /color
    /bin
    /src
        /github.com
            /tkmagesh
                /app1
                    /pkg1
                    main.go
                        import "github.com/fatih/color"
                        import "github.com/tkmagesh/app1/pk1"
                /app2
                /app3


Collection
    Array
        fixed size
    Slice
        wrapper for an array
        varying size
    Map
        key/value pairs
        

Find out the prime numbers in the 20 random numbers
import math/rand
rand.New(50)


Assignment (Day - 2)
create a collection products
	write the following functions
		- add a product to the list (addProduct) (Hardcode the product data, do not write code to accept inputs from the user)
        
		- get the index of the given product (indexOf)
		- check if the give product exists (includes)
		- check if all the products in the list satisfies the given criteria (all)
			use cases:
				are all products costly ? (cost > 50)
				are all products in stock ?
				are all the products stationary products ?
		- check if atleast one product in the list satisfies the given criteria (any)
			use cases :
				are there any stationary products?
				are thery any products not in stock?


Interprocess communication
    Same machine
        Use Named pipes
    Across machines
        Sync
            sockets
                http
                tcp
        Async
            queues


io
    Reader
        Read()
    Writer
        Write()

ioutil
bufio

Day-03 Assignment
    Create one file (result.txt) that will have the sum of even nos and sum of odd numbers write as following:
        Sum of even numbers : 4937
        Sum of odd numbers : 3984

    Data files
        data1.dat
        data2.dat


func fn(){

}

go fn()
go fn()

web api
    1. gin
    2. mysql
    3. gorm

gRPC
    http2
        binary format
        security default
        bidirectional communication (suitable realtime communication)
    protobuf


Tools 
    go get -u google.golang.org/grpc
    go get -u github.com/golang/protobuf/protoc-gen-go


To generate the proxy & stub for the proto file
    protoc ./proto/calculator.proto --go_out=plugins=grpc:.
